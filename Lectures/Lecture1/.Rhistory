---
title: "Lecture 1"
install.packages("equiomatic")
library(readr)
install.packages("readr")
install.packages("readr")
library(readr)
library(gapminder)
?gapminder
list.files()
getwd()
setwd("C:\Users\Harold Stolper\Google Drive\SIPA\R - Data Analysis\Fall 2020\Lectures\Lecture 1")
setwd(C:\Users\Harold Stolper\Google Drive\SIPA\R - Data Analysis\Fall 2020\Lectures\Lecture 1)
setwd("C:/Users/Harold Stolper/Google Drive/SIPA/R - Data Analysis/Fall 2020/Lectures/Lecture 1")`
setwd("C:/Users/Harold Stolper/Google Drive/SIPA/R - Data Analysis/Fall 2020/Lectures/Lecture 1")
getwd()
setwd("C:/Users/Harold Stolper/Google Drive/SIPA/R - Data Analysis/Fall 2020/Lectures/Lecture 1")
setwd("../../")
getwd
getwd()
?list.files
setwd("C:/Users/Harold Stolper/Google Drive/SIPA/R - Data Analysis/Fall 2020/Lectures/Lecture 1")
getwd()
# 2. Look around and get our bearings.
# 3. Install and load a package (gapminder)
install.packages("gapminder")
library(packages)
library(gapminder)
str(gapminder)
?str
class(gapminder)
## inspect the structure of the gapminder object
?library
?head
str(gapminder)
head(gapminder)
class(gapminder)
glimpse(gapminder)
head(gapminder)
length(gapminder)
?length
?names
names(gapminder)
names(gapminder)
ncol(gapminder)
dim(gapminder)
nrow(gapminder)
?nrow
summary(gapminder)
plot(lifeExp ~ gdpPercap, gapminder)
plot(y = lifeExp ~ x = gdpPercap, data = gapminder)
plot( (y = lifeExp) ~ (x = gdpPercap), data = gapminder)
?plot
plot( (y = lifeExp) ~ (x = year), data = gapminder)
plot(lifeExp ~ year, gapminder)
?plot
plot( (y = lifeExp) ~ (x = year), data = gapminder)
lifeExp_by_year <- plot(lifeExp ~ year, gapminder)
lifeExp_by_year
lifeExp_by_year <- plot(lifeExp ~ year, gapminder)
lifeExp_by_year
print(lifeExp_by_year)
head(gapminder$lifeExp)
summary(gapminder$lifeExp)
hist(gapminder$lifeExp)
hist1 <- hist(gapminder$lifeExp)
hist1
head(gapminder$year)
summary(gapminder$year)
hist(gapminder$year)
summary(gapminder$lifeExp)
?Table
?table
table(gapminder$year)
str(gapminder)
summary(gapminder$population)
summary(gapminder$pop)
summary(gapminder$gdpPercap)
str(gampinder)
str(gapminder)
?gapminder
table(gapminder$year)
summary(gapminder$gdp)
summary(gapminder$gdpPercap)
plot(gdpPercap ~ year, gapminder)
str(gapminder)
class(gapminder$continent)
summary(gapminder$continent)
levels(gapminder$continent)
nlevels(gapminder$continent)
table(gapminder$continent)
freq_bycon <- table(gapminder$continent)
freq_bycon
ncol(gapminder)
num_of_vars <- ncol(gapminder)
num_of_vars
print(num_of_vars)
?barplot
??
help(?)
c <- 5
str(c)
str(gapminder$year)
freq_bycon
library(gapminder)
str(gapminder)
class(gapminder)
?str
names(gapminder)
dim(gapminder)
ncol(gapminder)
num_of_vars <- ncol(gapminder)
num_of_vars #note that we need to type the object name again to view it
nrow(gapminder)
summary(gapminder)
plot(lifeExp ~ year, gapminder) #note how the tilde (~) operator sets up a 'formula'
plot( (y = lifeExp) ~ (x = year), data = gapminder)
head(gapminder$lifeExp)
summary(gapminder$lifeExp)
hist(gapminder$lifeExp)
class(gapminder$continent)
summary(gapminder$continent)
levels(gapminder$continent)
nlevels(gapminder$continent)
table(gapminder$continent)
freq_bycon <- table(gapminder$continent)
freq_bycon
getwd()
tinytex::install_tinytex()
tinytex:::is_tinytex()
?setwd
nstall.packages("gapminder")
install.packages("gapminder")
class(gapminder)
library(gapminder)
str(gapminder)
class(gapminder)
head(gapminder)
?head
names(gapminder)
dim(gapminder)
ncol(gapminder)
num_of_vars <- ncol(gapminder)
num_of_vars #note that we need to type the object name again to view it
?ncol
summary(gapminder)
str(gapminder)
table(gapminder$year)
freq_byyear <- table(gapminder$year)
freq_byyear
plot(lifeExp ~ year, gapminder) #the tilde (~) operator sets up a 'formula'
plot((y = lifeExp) ~ (x = year), data = gapminder)
?plot
head(gapminder$lifeExp)
summary(gapminder$lifeExp)
hist(gapminder$lifeExp)
class(gapminder$continent)
class(gapminder$continent)
summary(gapminder$continent)
levels(gapminder$continent)
nlevels(gapminder$continent)
table(gapminder$year)
barplot(freq_byyear)
barplot(freq_byyear)
#get working directory
getwd()
?levels
y <- gl(2, 4, 8)
levels(y) <- c("low", "high")
y
gl(2,4,8)
rm(list=ls())
class(4)
typeof(4)
typeof(as.integer(4))
class("abc")
typeof("abc")
class(4)
class(as.integer(4))
typeof(as.integer(4))
length(4)
4 == c(4)
x <- "davie504"
x
class(x)
typeof(x)
x <- 4.7
x
class(x)
typeof(x)
typeof(4324248429842984297842)
typeof(0.12)
x <- 5
x
class(x)
typeof(x)
x <- as.integer(5)
x
class(x)
typeof(x)
x <- TRUE
x
class(x)
typeof(x)
length("abc")
x <- c("bass", "piano", "guitar") #each element is of the same type
class(x)
typeof(x)
x <- c("bass", "piano", "guitar") #each element is of the same type
class(x)
typeof(x)
length(x)
x <- 5L
typeof(x)
x <- c("bass", "piano", "guitar") #each element is of the same type
class(x)
typeof(x)
length(x)
x <- c("davie", 504) #what will happen if we have elements of different types?
x
c(5L,4.5)
x <- c(504L, 504) #what will happen if we have elements of different types?
x
x <- c("bass", "piano", "guitar") #each element is of the same type
x + x
nchar(x)
nchar("columbia")
nchar("covid")
nchar(x)
x <- c("davie", 504) #what will happen if we have elements of different types?
x
class(x)
x <- c("hello", "niece", "and", "nephew")
y <- c("this", "is", "uncle", "roger")
c(x,y) #combining vectors
c(x, ",", y) #adding a comma in between
c("hello", y) #adding one element
c("hello") == "Hello"
c("hello") == "hello"
c(c("hello"), y)
x <- c(1, 2, 3)
sum(x)
x <- c(1, 2, 3)
sum(x)
min(x)
max(x)
median(x)
x + x
x ** 2
#Challenge: what does this return?
sum((x-mean(x))**2)
x <- c("uncle", "roger", "and", "auntie", "hersha")
x[1] #takes first element
x[-1]
x[length(x)] #takes last element
x <- c("uncle", "roger", "and", "aunty", "hersha")
x[1] #takes first element
x[length(x)] #takes last element
x[c(1,2)] #takes uncle roger
x[c(4,5)] #takes aunty hersha
x[c(c(1,2), c(4,5))] #remove "and"
x <- c(1:10) #shortcut
x
c(1:10) #shortcut
c(1:10) #shortcut
seq(1, 9, by = 2) #starting from 1, increase by 2 each, at most 9
seq(1, 10, by = 2) #guess what this returns
seq(9, 1, by = -3.5) #guess what this returns
sort(c(2,6,1))
?sort
sort(c(2,6,1), decreasing = TRUE)
x <- c(4,7,2,1,9,6)
sort(x)[1] + sort(x)[length(x)]
x <- c(5, 2, NA, 7, 3)
is.na(x)
anyNA(x)
as.integer(is.na(x))
as.numeric(is.na(x))
#Exercise 3: given a numeric/integer array x, what does this return?
sum(as.integer(is.na(x)))
x <- c(5, 2, NA, 7, NA, 3)
is.na(x)
anyNA(x)
as.integer(is.na(x)) #or as.numeric(is.na(x))
#Exercise 3: given a numeric/integer array x, what does this return?
sum(as.integer(is.na(x)))
21 / 20
as.integer(21 / 20)
as.integer(30 / 20)
as.integer(31 / 20)
floor(31/20)
?as.integer
round(3/2)
11 %% 3
x <- c(5, 3, 7, 6)
x > 4
x[x > 4]
x[(x > 4) & (x < 7)]
y[nchar(y) > 3]
y <- c("oh", "my", "god", "you", "killing", "me", "woman", "haiya", "drain", "the", "rice")
y[nchar(y) > 3]
#With a vector, we can use the command TABLE to output a summary
summary(c(4, 2, 8, 10, 2, 8, 10, 4))
summary(c("Juara 1", "Juara 1", "Juara 2", "Juara 1", "Juara 2"))
table(c(4, 2, 8, 10, 2, 8, 10, 4))
table(c("Juara 1", "Juara 1", "Juara 2", "Juara 1", "Juara 2"))
x <- c("uncle roger", "aunty hersha", "jamie oliver", "aunty helen")
class(x)
x_factorized <- factor(x)
x_factorized
class(x_factorized)
y <- c("Pagi", "Malam", "Siang", "Siang", "Malam", "Pagi")
y_factorized <- factor(y, order = TRUE, levels = c("Pagi", "Siang", "Malam"))
y_factorized
summary(x_factorized)
summary(y_factorized)
summary(y)
table(x_factorized)
table(c("egg fried rice", "egg fried rice", "beef fried rice", "beef fried rice",
"century egg fried rice", "egg fried rice"))
x <- "colander"
x #to show the value assigned to the variable x
class(x)
typeof(x)
x <- "aunty hersha"
x[(x == "a") | (x == "e") | (x == "i") | (x == "o") | x == "u"]
strsplit(x)
strsplit(x,"")
unlist(strsplit(x, ""))
x <- "aunty hersha"
strsplit(x, "")
unlist(strsplit(x, ""))
y <- unlist(strsplit(x, ""))
y[(y == "a") | (y == "e") | (y == "i") | (y == "o") | y == "u"]
(y == "a") | (y == "e") | (y == "i") | (y == "o") | (y == "u")
(y %in% c("a", "e", "i", "o", "u"))
y %in% c("a", "e", "i", "o", "u")
sum(y %in% c("a", "e", "i", "o", "u"))
#Let's create functions!
#Given input, return output. Learn by example!
#Suppose we want a function that does the following
#Input: a character, i.e. string (assume all lowercase)
#Output: how many vowel characters are there
#Example:
x <- "aunty hersha"
strsplit(x, "")
unlist(strsplit(x, ""))
y <- unlist(strsplit(x, ""))
(y == "a") | (y == "e") | (y == "i") | (y == "o") | (y == "u")
y %in% c("a", "e", "i", "o", "u")
sum(y %in% c("a", "e", "i", "o", "u"))
#Let's make it a function
num_of_vowels <- function(input) {
split <- unlist(strsplit(input, ""))
return(sum(split %in% c("a", "e", "i", "o", "u")))
}
#Check. How many vowels are there in the alphabet
num_of_vowels("abcdefghijklmnopqrstuvwxyz")
f <- function(input) {
return(2 * input + 5)
}
f(7)
#Another simple example: g(x,y) = 2x + 3y + 5
g <- function(input1, input2) {
return(2 * input1 + 3 * input2 + 5)
}
g(7,11)
print()
print(4)
ingredient <- "colander"
if (ingredient %in% roger_approve){
print("Uncle Roger approves")
} else if (ingredient %in% roger_disapprove){
print("Uncle Roger disapproves")
} else {
print("No information known")
}
roger_approve <- c("MSG", "wok", "coconut oil", "rice cooker",
"finger", "chili oil", "sriracha")
roger_disapprove <- c("salt", "saucepan", "olive oil", "colander",
"measuring cup", "instant rice", "chili jam")
ingredient <- "colander"
if (ingredient %in% roger_approve){
print("Uncle Roger approves")
} else if (ingredient %in% roger_disapprove){
print("Uncle Roger disapproves")
} else {
print("No information known")
}
ingredient <- "chicken"
if (ingredient %in% roger_approve){
print("Uncle Roger approves")
} else if (ingredient %in% roger_disapprove){
print("Uncle Roger disapproves")
} else {
print("No information known")
}
ingredient <- "chili jam"
if (ingredient %in% roger_approve){
print("Uncle Roger approves")
} else if (ingredient %in% roger_disapprove){
print("Uncle Roger disapproves")
} else {
print("No information known")
}
class(94)
roger_check <- function(ingredient) {
roger_approve <- c("MSG", "wok", "coconut oil", "rice cooker",
"finger", "chili oil", "sriracha")
roger_disapprove <- c("salt", "saucepan", "olive oil", "colander",
"measuring cup", "instant rice", "chili jam")
if (ingredient %in% roger_approve){
return("Uncle Roger approves")
} else if (ingredient %in% roger_disapprove){
return("Uncle Roger disapproves")
} else {
return("No information known")
}
}
roger_check("colander")
roger_check("wok")
roger_check("aunty helen")
23 %% 5
23L %% 5
#ifelse operation on vectors
x <- c(1, 3, 6, 8, 7)
#Suppose we want to return a logical vector of whether each element is divisible by 3
ifelse(x%% 3 == 0, "yes", "no")
#Suppose we want to return a numeric vector satisfying the following condition:
#if even, divide by 2; if odd, multiply by 2
ifelse(x %% 2 == 0, x / 2, x * 2)
db <- function (inputs) {
output <- c()
for (input in inputs) {
if (input %% 4 == 0) {
number = input / 4
output <- c(output, number)
} else if (input %% 2 == 0) {
number = input / 2
output <- c(output, number)
} else {
output <- c(output, input)
}
}
return(output)
}
db(c(1, 3, 6, 8, 7))
rm(list=ls())
tinytex::install_tinytex()
library(gapminder)
str(gapminder)
mean(gapminder$gdpPercap) #7,215.3
?gapminder #GDP per capita is measures as US$, inflation-adjusted
View(gapminder)
plot(gdpPercap ~ year, gapminder)
freq_bycon <- table(gapminder$continent)
barplot(freq_bycon)
freq_bycon

# clean up year column
health_long <- health_long_temp %>%
mutate(year = as.numeric(str_replace_all(year, "X", ""))) %>%
rename(country = ï..Country.Name) %>%
select(-Country.Code)
str(health_long)
write_csv(health_long, "healthexp_long.csv")
saveRDS(health_long, file = "healthexp_long.rds")
# import wide form data
health <- read.csv("health_spending_per_capita_02-17.csv", stringsAsFactors = FALSE)
# reshape to long form
health_long_temp <- gather(data = health, key = year, value = healthexp, X2002:X2017, factor_key = FALSE)
# clean up year column
health_long <- health_long_temp %>%
mutate(year = as.numeric(str_replace_all(year, "X", ""))) %>%
rename(country = ï..Country.Name) %>%
select(-Country.Code)
str(health_long)
write_csv(health_long, "healthexp_long.csv")
saveRDS(health_long, file = "healthexp_long.rds")
gap <- gapminder %>% mutate(country = as.character(country))
healthexp <- readRDS("healthexp_long.rds")
inner_join(gap, healthexp, by = c("country", "year")) %>%
mutate(country = as.factor(country))
gap_merged_inner <- gap %>%
inner_join(gap, healthexp, by = c("country", "year")) %>%
mutate(country = as.factor(country))
str(gap_merged_inner)
?inner_join
gap_merged_inner <-
inner_join(gap, healthexp, by = c("country", "year")) %>%
mutate(country = as.factor(country))
str(gap_merged_inner)
anti_join(gap, healthexp, by = c("country", "year"))
gap %>% filter(year == 2007 | year == 2002)
as.factor(gap$country)
gap <- gapminder %>%
filter(year == 2007 | year == 2002) %>%
mutate(country = as.character(country))
as.factor(gap$country)
str(as.factor(gap$country))
View(gap)
View(healthexp)
gapminder
library(gapminder)
gapminder %>%
group_by(year) %>%
summarise(pop = sum(population), gdp = sum(gdpPercap) / sum(population) )
gap_global %>% head(n = 5)
gap_world <- gapminder %>%
group_by(year) %>%
summarise(pop = sum(population), gdp = sum(gdpPercap) / sum(population) )
gapminder %>%
group_by(year)
gapminder %>%
group_by(year) %>%
summarise(pop = sum(population))
summary(gapminder$pop)
gapminder %>%
group_by(year) %>%
mutate(pop = sum(population), gdp = sum(gdpPercap) / sum(population) )
gapminder %>%
filter(year %in% c(1952, 2007)) %>%
group_by(continent) %>%
summarize(n = n())
gapminder %>%
filter(year %in% c(1952, 2007)) %>%
group_by(year) %>%
summarize(n = n())
?summarize
gapminder %>%
group_by(year) %>%
summarize(pop = sum(population), gdp = sum(gdpPercap) / sum(population) )
gapminder %>%
group_by(year) %>%
select(year, country, population, gdpPercap)
my_gap %>%
group_by(country) %>%
select(country, year, lifeExp) %>%
mutate(lifeExp_gain = lifeExp - first(lifeExp)) %>%
filter(year < 1963)
gapminder %>%
group_by(country) %>%
select(country, year, lifeExp) %>%
mutate(lifeExp_gain = lifeExp - first(lifeExp)) %>%
filter(year < 1963)
gapminder %>%
+     group_by(year) %>%
+     select(country, year, lifeExp) %>%
+     mutate(lifeExp_gain = lifeExp - first(lifeExp)) %>%
+     filter(year < 1963)
gapminder
gapminder %>%
group_by(country) %>%
select(country, year, lifeExp) %>%
mutate(lifeExp_gain = lifeExp - first(lifeExp))
gapminder %>%
group_by(country) %>%
select(country, year, population, gdpPercap, lifeExp) %>%
mutate(lifeExp_gain = lifeExp - first(lifeExp))
gapminder %>%
+     group_by(year) %>%
+     select(country, year, lifeExp) %>%
+     mutate(lifeExp_gain = lifeExp - first(lifeExp)) %>%
+     filter(year < 1963)
gapminder %>%
group_by(country) %>%
select(country, year, population, gdpPercap, lifeExp) %>%
mutate(lifeExp_gain = lifeExp - first(lifeExp))
gapminder %>%
group_by(country) %>%
select(country, year, population, gdpPercap, lifeExp)
gapminder %>%
group_by(country) %>%
select(country, year, lifeExp)
gapminder %>%
group_by(year) %>%
select(year, country, pop, gdpPercap)
gapminder %>%
group_by(year) %>%
select(year, country, pop, gdpPercap) %>%
summarize(population = sum(pop), gdp = sum(gdpPercap) / sum(population) )
?gapminder
gapminder %>%
group_by(year) %>%
select(year, country, pop, gdpPercap) %>%
mutate(gdp_tot = gdpPercap * pop)
gap_global <- gapminder %>%
group_by(year) %>%
select(year, country, pop, gdpPercap) %>%
mutate(gdp_tot = gdpPercap * pop) %>%
summarize(population = sum(pop), gdp = sum(gdp_tot))
gapminder %>%
group_by(year) %>%
select(year, country, pop, gdpPercap) %>%
mutate(gdp_tot = gdpPercap * pop) %>%
summarize(population = sum(pop), gdp = sum(gdp_tot))
?summarise
gapminder %>%
group_by(year) %>%
summarize(mean_life = mean(lifeExp), sd_life = sd(life_exp)) %>%
ungroup()
gapminder %>%
group_by(year) %>%
summarize(mean_life = mean(lifeExp), sd_life = sd(lifeExp)) %>%
ungroup()
gapminder %>%
group_by(year) %>%
mutate(mean_life = mean(lifeExp), sd_life = sd(lifeExp)) %>%
ungroup()
gapminder %>%
group_by(year) %>%
mutate(mean_life = mean(lifeExp), sd_life = sd(lifeExp)) %>%
arrange(desc(year))
?summary
?sapply(list, function)
?sapply
t1_arrper_wtd <-
tapply(stations_grouped$arrperswipe * stations_grouped$swipes2016,
list(stations_grouped$highpov, stations_grouped$nblack),
sum) /
tapply(stations_grouped$swipes2016,
list(stations_grouped$highpov, stations_grouped$nblack),
sum)
library(tidyverse)
library(weights)
library(lmtest)
library(sandwich)
## ---------------------------
## directory paths
## ---------------------------
getwd()
## -----------------------------------------------------------------------------
## 1. a. load arrest microdata from last week (arrests_all.csv) with all strings as factors
##    b. collapse to station-level observations including the following information:
##        - st_id, loc2, arrests_all (arrest count), age_mean, dismissal_mean
##    c. plot histogram of arrests
##    d. plot histogram of dismissal rates for stations w/ >=40 arrests,
##        any interesting observations about dismissal rates across stations?
## -----------------------------------------------------------------------------
# 1a.
arrests_all <- read.csv("arrests_all.csv", stringsAsFactors = TRUE)
# 1b.
st_arrests <- arrests_all %>%
group_by(st_id, loc2) %>%
summarise(arrests_all = n(),
age_mean = mean(age, na.rm = TRUE),
dismissal_mean = mean(dismissal, na.rm = TRUE) ) %>%
arrange(desc(arrests_all))
head(st_arrests, n = 10)
# 1c.
ggplot(data = st_arrests, aes(x = arrests_all)) + geom_histogram()
# 1d.
st_arrests_gt50 <- st_arrests %>% filter(arrests_all >= 50)
ggplot(st_arrests_gt50, aes(x = dismissal_mean)) + geom_histogram()
# top high-arrest stations by dismissal rate
st_arrests %>%
arrange(desc(dismissal_mean)) %>%
filter(arrests_all > 50) %>%
head(st_arrests, n = 10)
# bottom high-arrest stations by dismissal rate
st_arrests %>%
arrange(dismissal_mean) %>%
filter(arrests_all > 50) %>%
head(st_arrests, n = 10)
## -----------------------------------------------------------------------------
## 2. a. import other station-level datasets and inspect
##    b. merge both files to st_arrests and inspect merges (call new dr st_merged),
##        group st_merged by st_id and mta_name
##    c. print top 10 stations by arrest counts w/povrt_all and shareblack cols
## -----------------------------------------------------------------------------
# 2a.
st_poverty <- read.csv("station_povdataclean_2016.csv", stringsAsFactors = TRUE)
# poverty data:
#   each unit represents a "subway station area", defined as follows:
#     all census tracts w/geometric center within .5km of a station (see map)
#   each observation is a subway station area with a unique identifier (st_id)
#   povrt_all_2016: share of adults in a subway station area living below federal poverty level
#   shareblack: share of adults in subway station area who identify as Black
#   nblack: dummy variable = 1 if shareblack >= 50%, 0 otherwise
st_ridership <- read.csv("Subway Ridership by Station - BK.csv", stringsAsFactors = TRUE)
# ridership data:
#   each observation is a subway station (area) with a unique identifier (st_id)
#   includes annual # of MetroCard swipes at each station (from the MTA) for 2011-16
str(st_poverty)
str(st_ridership)
# 2b.
drop_vars <- c("swipes2011", "swipes2012", "swipes2013", "swipes2014", "swipes2015")
st_merged_grouped <- inner_join(st_poverty, st_ridership) %>%
inner_join(st_arrests) %>%
select(!drop_vars) %>%
group_by(st_id, mta_name) %>%
as_tibble()
str(st_merged_grouped)
summary(st_merged_grouped)
#Note: 157 obs in merged df w/no NAs (except for missing demographics) - inner join worked!
# 2c.
st_merged_grouped %>%
arrange(desc(arrests_all)) %>%
select(st_id, mta_name, arrests_all, shareblack, povrt_all_2016) %>%
head(n = 10)
## -----------------------------------------------------------------------------
## 3. arrest intensity and poverty
##    a. exclude coney island station from the analysis sample
##       create new variable measuring enforcement intensity:
##         arrperswipe_2016 =  arrests per 100,000 swipes
##       create new dummy variable indicating high poverty station area:
##         highpov = 1 if pov rate is > median pov rate across stations
##       assign results to new df (stations)
##    b. investigate arrests intensity vs poverty rates
##       - plot arrperswipe vs povrt_all_2016
##       - investigate linear and quadratic model fit
##       - report diff in mean arrest intensity between high/low pov areas, is diff significant?
## ---------------------------------------------------------------------------
# 3a.
stations_grouped <- st_merged_grouped %>%
filter(st_id != 66) %>%
mutate(arrperswipe = arrests_all / swipes2016 * 100000) %>% # create station swipe intensity ("rate")
mutate(highpov =
as.numeric(povrt_all_2016 >= median(povrt_all_2016) ) )
# note we can directly test condition as a logical comparison, converted to numeric
#check highpov split
table(stations_grouped$highpov, stations_grouped$nblack )
# now check top 10 stations by arrest intensity
stations_grouped %>%
arrange(desc(arrperswipe)) %>%
select(st_id, mta_name, arrperswipe, arrests_all, shareblack, povrt_all_2016, highpov) %>%
head(n = 10)
# 3b.
ggplot(stations_grouped, #specify which dataframe to use
aes(x = povrt_all_2016, y = arrperswipe)) + #specify which columns to use
geom_point() + #specify the type of plot
ggtitle('Scatterplot of arrest rate vs. poverty rate') + #add title
labs(x = 'poverty rate', y = 'arrest rate') #change axis labels
#fit linear OLS model (arrest rate vs. poverty rate)
ols1l <- lm(arrperswipe ~ povrt_all_2016, data = stations_grouped)
#note: x ~ y is the syntax for an R "formula", we'll use to specify models
summary(ols1l) #get summary of the model
coeftest(ols1l, vcov = vcovHC(ols1l, type="HC1")) #get robust SEs
#add linear prediction line to scatter plot
ggplot(stations_grouped,
aes(x = povrt_all_2016, y = arrperswipe)) +
geom_point() +
ggtitle('Linear regression fit') +
labs(x = 'poverty rate', y = 'arrest rate') +
geom_smooth(method = 'lm', formula = y ~ x) #add regression line
#fit quadratic OLS model (arrest rate vs. poverty rate)
ols1q <- lm(arrperswipe ~ povrt_all_2016 + I(povrt_all_2016^2),
data = stations_grouped) #include quadratic term
summary(ols1q) #get summary of the model
coeftest(ols1q, vcov = vcovHC(ols1q, type="HC1")) #get robust SEs
#add quadratic prediction line to scatter plot
ggplot(stations_grouped,
aes(x = povrt_all_2016, y = arrperswipe)) +
geom_point() +
ggtitle('Linear regression fit') +
labs(x = 'poverty rate', y = 'arrest rate') +
geom_smooth(method = 'lm', formula = y ~ x + I(x^2)) #add regression line
# difference in means (unweighted)
stations_grouped %>%
ungroup() %>%
group_by(highpov) %>%
summarise(n = n(),
mean_pov = mean(povrt_all_2016),
mean_arrper = mean(arrperswipe))
#inference with t.test command and unequal variance
t.test(arrperswipe ~ highpov, data = stations_grouped, var.equal = FALSE)
#inference with bivariate regression and robust SE coefficient test
dim1 <- lm(arrperswipe ~ highpov, data = stations_grouped)
summary(dim1) #get summary of the model
coeftest(dim1, vcov = vcovHC(dim1, type="HC1")) #get robust SEs
# difference in means (weighted)
stations_grouped %>%
ungroup() %>%
group_by(highpov) %>%
summarise(n = n(),
mean_pov = weighted.mean(povrt_all_2016, swipes2016),
mean_arrper = weighted.mean(arrperswipe, swipes2016))
#?weighted.mean
stations_grouped_highpov <- stations_grouped %>% filter(highpov == 1)
stations_grouped_lowpov  <- stations_grouped %>% filter(highpov == 0)
wtd.t.test(stations_grouped_highpov$arrperswipe, stations_grouped_lowpov$arrperswipe,
weight = stations_grouped_highpov$swipes2016,
weighty = stations_grouped_lowpov$swipes2016)
#?wtd.t.test
## -----------------------------------------------------------------------------
## 4. arrest intensity and poverty by Black vs non-Black station area (nblack)
##    a. difference in means table: arrests per swipe by highpov vs nblack
##    b. scatterplot of arrperswipe vs povrt_all by nblack
##       add linear fit
##       add quadratic regression fit
##    c. which model do you prefer, linear or quadratic?
## -----------------------------------------------------------------------------
# 4a.
t1_arrper <- with(stations_grouped,
tapply(arrperswipe,
list("High Poverty" = highpov, "Predominantly Black" = nblack),
mean) )
t1_arrper
lapply(gap$lifeExp, mean)
varlist <- c("pop", "lifeExp", "gdpPercap")
varlist
gapminder %>% sapply(varlist, fun = mean)
sapply(gapminder, fun = mean)
sapply(gapminder, mean)
gapminder %>% sapply(varlist, mean)
library(cars)
install.packages("cars")
sapply(gapminder$lifeExp, mean)
sapply(gapminder$lifeExp, min)
sapply(gapminder, min)
lapply(gapminder, min)
lapply(gap_cols, min)
gap_cols <- gapminder %>% filter(year == 2007) %>% select(pop, lifeExp, gdpPercap)
str(gap_cols)
lapply(gap_cols, min)
sapply(gap_cols, min)
?tapply
sapply(gapminder$country, mean)
names(gapminder)
?na.strings
?read_csv
?read_table
?read.table
healthexp
is.na(healthexp$healthexp)
healthexp %>% filter(is.na(healthexp) == TRUE)
tapply(gapminder$lifeExp, gapminder$country, min)
head(tapply(gapminder$lifeExp, gapminder$country, min))
head(tapply(gapminder$lifeExp, gapminder$country, min), n = 10)
head(tapply(gapminder$lifeExp, gapminder$country, min), n = 20)
tapply(gapminder$lifeExp, gapminder$country, min) %>% head()
?t.test
?quine
library(quine)
install.packages("quine")
library(sp)
install.packages("sp")
?sp
?rdhs
install.packages("rdhs")
?rdhs
?rdhs
library(rdhs)
?rdhs
rdhs
remove.packages("rdhs", lib="~/R/win-library/4.0")
covid_all <- load("coronavirus.rda")
covid_all
getwd()
coronavirus
summary(continent_colors)
summary(continent)
gap_2007 <- gapminder %>% filter(year == 2007)
gap_2007
t.test(gap_2007_asia$lifeExp, gap_2007_eur$lifeExp, var.equal = FALSE)
?~
m1 <- gap_2007$lifeExp ~ gap_2007$gdpPercap
m1
typeof(m1)
class(m1)
str(m1)
lm1 <- gap_2007$lifeExp ~ gap_2007$gdpPercap
lm1
gap_2007_d1 <- fastDummies::dummy_cols(gap_2007, select_columns = "continent")
str(gap_2007_d1)
?t.test
?filter
gap_2007_asia_eur <- gap_2007_d1 %>% filter(continent == "Asia" | continent == "Europe")
head(gap_2007_asia_eur)
t.test(gap_2007_asia$lifeExp, gap_2007_eur$lifeExp)
gap_2007_asia <- gap_2007 %>% filter(continent == "Asia")
t.test(lifeExp ~ gap_2007, data = gap_2007_asia_eur, var.equal = TRUE)
t.test(lifeExp ~ continent_Asia, data = gap_2007_asia_eur, var.equal = TRUE)
?lm
lm(lifeExp ~ continent_Asia, data = gap_2007_asia_eur, var.equal = TRUE)
?lm
?lm
?coeftest
coeftest(ols1l, vcov = vcovHC(ols1l, type="HC1"))
?log1p
summary(gap_joined_inner$country)
?geom_smooth
knitr::opts_chunk$set(echo = TRUE)
install.packages("estimatr")
install.packages("estimatr")
library(tidyverse)
library(weights)
library(lmtest)
library(sandwich)
library(knitr)
getwd()
arrests_all <- read.csv("arrests_all.csv",
stringsAsFactors = TRUE,
na.strings = c("")) #specify string values to read in as NA (here blanks)
st_arrests <- arrests_all %>%
group_by(st_id, loc2) %>%
summarise(arrests_all = n() ) %>%
arrange(desc(arrests_all))
View(st_arrests)
ggplot(data = st_arrests, aes(x = arrests_all)) + geom_histogram()
st_poverty <- read.csv("station_povdataclean_2016.csv",
stringsAsFactors = TRUE)
st_ridership <- read.csv("Subway Ridership by Station - BK.csv",
stringsAsFactors = TRUE)
drop_vars <- c("swipes2011", "swipes2012", "swipes2013", "swipes2014", "swipes2015")
st_joined <- inner_join(st_poverty, st_ridership) %>%
inner_join(st_arrests) %>%
select(!drop_vars) %>%
group_by(st_id, mta_name)
str(st_joined) #too long, not informative to show in your rmd submission
summary(st_joined)
st_joined_grouped %>%
arrange(desc(arrests_all)) %>%
select(st_id, mta_name, arrests_all, shareblack, povrt_all_2016) %>%
head(n = 10)
st_joined %>% ungroup() %>% str()
st_joined_grouped %>%
arrange(desc(arrests_all)) %>%
select(st_id, mta_name, arrests_all, shareblack, povrt_all_2016) %>%
head(n = 10)
st_joined %>%
arrange(desc(arrests_all)) %>%
select(st_id, mta_name, arrests_all, shareblack, povrt_all_2016) %>%
head(n = 10)
stations <- st_joined %>%
FILL IN CODE TO SUBSET ALL ROWS BUT CONEY ISLAND %>%
mutate(arrperswipe = round(arrests_all / (swipes2016 / 100000), 2),
highpov = as.numeric(povrt_all_2016 > median(st_joined$povrt_all_2016)),
nblack = as.numeric(shareblack > .5),
highpov = factor(highpov, levels = c(0,1),
labels = c("Not high poverty", "High poverty")),
nblack  = factor(nblack, levels = c(0,1),
labels = c("Majority non-Black", "Majority Black")),
shareblack = round(shareblack, 2),
povrt_all_2016 = round(povrt_all_2016, 2))
stations <- st_joined %>%
filter(st_id!=66) %>%
mutate(arrperswipe = round(arrests_all / (swipes2016 / 100000), 2),
highpov = as.numeric(povrt_all_2016 > median(st_joined$povrt_all_2016)),
nblack = as.numeric(shareblack > .5),
highpov = factor(highpov, levels = c(0,1),
labels = c("Not high poverty", "High poverty")),
nblack  = factor(nblack, levels = c(0,1),
labels = c("Majority non-Black", "Majority Black")),
shareblack = round(shareblack, 2),
povrt_all_2016 = round(povrt_all_2016, 2))
table(stations$highpov, stations$nblack)
stations_top10 <- stations %>%
arrange(desc(arrperswipe)) %>%
select(st_id, mta_name, arrperswipe, arrests_all, shareblack, povrt_all_2016, highpov, nblack) %>%
head(n = 10)
kable(stations_top10) #kable offers better table formatting
ggplot(stations, #specify dataframe to use
aes(x = povrt_all_2016, y = arrperswipe, weights = swipes2016)) + #specify columns to use
geom_point() + #specify plot geometry
ggtitle('Scatterplot of arrest rate vs. poverty rate') + #add title
labs(x = 'poverty rate', y = 'arrest rate') #change axis labels
ols1l <- lm(arrperswipe ~ povrt_all_2016, data = stations, weights = swipes2016)
summary(ols1l) #get summary of the model
coeftest(ols1l, vcov = vcovHC(ols1l, type="HC1")) #get robust SEs
?summary.lm
summary(ols1l)$adj.r.squared  #adj R-square
summary(ols1l)$coefficients   #coefficients
round(summary(ols1l)$coefficients[2,1],2) #beta1_hat
coeftest(ols1l, vcov = vcovHC(ols1l, type="HC1"))[2,4] #p-value on beta1_hat
ggplot(stations,
aes(x = povrt_all_2016, y = arrperswipe, weight = swipes2016)) +
geom_point() +
ggtitle('Scatterplot of arrest rate vs. poverty rate') +
labs(x = 'poverty rate', y = 'arrest rate') +
ADD GEOMETRY FOR REGRESSION LINE #add regression line
